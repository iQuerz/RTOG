// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RTOG.Data.Persistence;

#nullable disable

namespace RTOG.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230110172216_v0.3_Add_Player_to_account")]
    partial class v03_Add_Player_to_account
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.12");

            modelBuilder.Entity("RTOG.Data.Models.Account", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsGuest")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LobbyID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OngoingGameID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlayerID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SessionID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("LobbyID");

                    b.HasIndex("OngoingGameID");

                    b.HasIndex("PlayerID")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("RTOG.Data.Models.Faction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("Factions");
                });

            modelBuilder.Entity("RTOG.Data.Models.Lobby", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("HostID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("HostID");

                    b.ToTable("Lobbies");
                });

            modelBuilder.Entity("RTOG.Data.Models.Map", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("RTOG.Data.Models.OngoingGame", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MapID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TurnCounter")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("MapID");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("RTOG.Data.Models.Player", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FactionID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GoldPerTurn")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalGold")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("FactionID");

                    b.HasIndex("GameID");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("RTOG.Data.Models.Tile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Gold")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MapID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OwnerID")
                        .HasColumnType("INTEGER");

                    b.Property<float>("PositionX")
                        .HasColumnType("REAL");

                    b.Property<float>("PositionY")
                        .HasColumnType("REAL");

                    b.Property<int?>("TileID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("MapID");

                    b.HasIndex("OwnerID");

                    b.HasIndex("TileID");

                    b.ToTable("Tile");
                });

            modelBuilder.Entity("RTOG.Data.Models.Unit", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Attack")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Defense")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Health")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Movement")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MyFactionID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MyPlayerID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MyTileID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("MyFactionID");

                    b.HasIndex("MyPlayerID");

                    b.HasIndex("MyTileID");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("RTOG.Data.Models.UnitUpgrade", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UnitID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("UnitID");

                    b.ToTable("UnitUpgrades");
                });

            modelBuilder.Entity("RTOG.Data.Models.Account", b =>
                {
                    b.HasOne("RTOG.Data.Models.Lobby", null)
                        .WithMany("Players")
                        .HasForeignKey("LobbyID");

                    b.HasOne("RTOG.Data.Models.OngoingGame", null)
                        .WithMany("Players")
                        .HasForeignKey("OngoingGameID");

                    b.HasOne("RTOG.Data.Models.Player", "Player")
                        .WithOne("PlayerAccount")
                        .HasForeignKey("RTOG.Data.Models.Account", "PlayerID");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("RTOG.Data.Models.Lobby", b =>
                {
                    b.HasOne("RTOG.Data.Models.Account", "Host")
                        .WithMany()
                        .HasForeignKey("HostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Host");
                });

            modelBuilder.Entity("RTOG.Data.Models.OngoingGame", b =>
                {
                    b.HasOne("RTOG.Data.Models.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");
                });

            modelBuilder.Entity("RTOG.Data.Models.Player", b =>
                {
                    b.HasOne("RTOG.Data.Models.Faction", "Faction")
                        .WithMany()
                        .HasForeignKey("FactionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RTOG.Data.Models.OngoingGame", "Game")
                        .WithMany()
                        .HasForeignKey("GameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faction");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("RTOG.Data.Models.Tile", b =>
                {
                    b.HasOne("RTOG.Data.Models.Map", "Map")
                        .WithMany("AllTiles")
                        .HasForeignKey("MapID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RTOG.Data.Models.Player", "Owner")
                        .WithMany("OwnedTiles")
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RTOG.Data.Models.Tile", null)
                        .WithMany("Neighbors")
                        .HasForeignKey("TileID");

                    b.Navigation("Map");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("RTOG.Data.Models.Unit", b =>
                {
                    b.HasOne("RTOG.Data.Models.Faction", "MyFaction")
                        .WithMany("Army")
                        .HasForeignKey("MyFactionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RTOG.Data.Models.Player", "MyPlayer")
                        .WithMany("AllMyUnits")
                        .HasForeignKey("MyPlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RTOG.Data.Models.Tile", "MyTile")
                        .WithMany("Units")
                        .HasForeignKey("MyTileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MyFaction");

                    b.Navigation("MyPlayer");

                    b.Navigation("MyTile");
                });

            modelBuilder.Entity("RTOG.Data.Models.UnitUpgrade", b =>
                {
                    b.HasOne("RTOG.Data.Models.Unit", "Unit")
                        .WithMany("Upgrades")
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("RTOG.Data.Models.Faction", b =>
                {
                    b.Navigation("Army");
                });

            modelBuilder.Entity("RTOG.Data.Models.Lobby", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("RTOG.Data.Models.Map", b =>
                {
                    b.Navigation("AllTiles");
                });

            modelBuilder.Entity("RTOG.Data.Models.OngoingGame", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("RTOG.Data.Models.Player", b =>
                {
                    b.Navigation("AllMyUnits");

                    b.Navigation("OwnedTiles");

                    b.Navigation("PlayerAccount")
                        .IsRequired();
                });

            modelBuilder.Entity("RTOG.Data.Models.Tile", b =>
                {
                    b.Navigation("Neighbors");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("RTOG.Data.Models.Unit", b =>
                {
                    b.Navigation("Upgrades");
                });
#pragma warning restore 612, 618
        }
    }
}
